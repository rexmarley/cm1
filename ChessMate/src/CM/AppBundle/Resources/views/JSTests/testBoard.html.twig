<!doctype html>
	<html>
		<head>
			<meta charset="utf-8">
			<title>JS Unit Tests</title>
			{# TODO: composer packages #}
			<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js"></script>
			<link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.17.1.css">
			<script src="//code.jquery.com/qunit/qunit-1.17.1.js"></script>
			<script src="{{ asset('bundles/cmapp/js/validationHelper.js') }}"></script>
			<script>
				//test abstractBoard indices to grid reference conversion
				QUnit.test("testResolveAbstractBoardReference", function( assert ) {
					for (i = 1; i <= 8; i++) {
						for (j = 0; j < 8; j++) {
							var alphaX = letterAt[j];
							var indices = getAbstractIndicesFromGridRef(alphaX, i);
							assert.equal(indices[0], i-1);
							assert.equal(indices[1], j);
							assert.equal(getGridRefFromAbstractIndices(indices[0], indices[1]), alphaX+'_'+i);
						}
					}
				});
				//test moving pieces on abstract board (using default piece positions)
				QUnit.test("testUpdateAbstractBoard", function( assert ) {
					updateAbstractBoard([1,4],[3,2]);
					assert.equal(abstractBoard[1][4], false);
					assert.equal(abstractBoard[3][2], 'w_pawn');
					updateAbstractBoard([7,3],[4,3]);
					assert.equal(abstractBoard[7][3], false);
					assert.equal(abstractBoard[4][3], 'b_queen');
					//reset board
					updateAbstractBoard([3,2],[1,4]);
					updateAbstractBoard([4,3],[7,3]);						
				});
				//test x-axis blocked (using default piece positions)
				QUnit.test("testXAxisBlocked", function( assert ) {
					//test unblocked moving left
					assert.equal(xAxisBlocked(3,0,2), false);
					assert.equal(xAxisBlocked(7,2,3), false);
					//test unblocked moving right
					assert.equal(xAxisBlocked(1,6,2), false);
					assert.equal(xAxisBlocked(3,7,3), false);
					//test blocked moving left
					assert.equal(xAxisBlocked(3,0,0), true);
					assert.equal(xAxisBlocked(5,1,1), true);
					assert.equal(xAxisBlocked(7,2,6), true);
					assert.equal(xAxisBlocked(3,0,7), true);
					//test blocked moving right
					assert.equal(xAxisBlocked(1,6,0), true);
					assert.equal(xAxisBlocked(3,7,1), true);
					assert.equal(xAxisBlocked(1,7,6), true);
					assert.equal(xAxisBlocked(3,5,7), true);
				});
				//test y-axis blocked (using default piece positions)
				QUnit.test("testYAxisBlocked", function( assert ) {
					//test unblocked moving forward
					assert.equal(yAxisBlocked(1,5,2), false);
					assert.equal(yAxisBlocked(2,4,3), false);
					//test unblocked moving backwards
					assert.equal(yAxisBlocked(6,2,2), false);
					assert.equal(yAxisBlocked(5,1,5), false);
					//test blocked moving forward
					assert.equal(yAxisBlocked(0,4,0), true);
					assert.equal(yAxisBlocked(0,2,1), true);
					//test blocked moving backwards
					assert.equal(yAxisBlocked(7,2,3), true);
					assert.equal(yAxisBlocked(7,3,4), true);
				});
				//test that two squares are diagonal (using default piece positions)
				QUnit.test("testOnDiagonal", function( assert ) {
					//test on diagonal
						//moving forwards
							//moving left
							assert.equal(onDiagonal([1,7],[5,3]), true);
							//moving right
							assert.equal(onDiagonal([0,3],[3,6]), true);
						//moving backwards
							//moving left
							assert.equal(onDiagonal([7,5],[5,3]), true);
							//moving right
							assert.equal(onDiagonal([6,7],[3,4]), true);
					//test not on diagonal
						//moving forwards
							//moving left
							assert.equal(onDiagonal([1,5],[3,4]), false);
							//moving right
							assert.equal(onDiagonal([2,3],[3,6]), false);
						//moving backwards
							//moving left
							assert.equal(onDiagonal([5,7],[4,4]), false);
							//moving right
							assert.equal(onDiagonal([6,3],[3,7]), false);
				});
				//test diagonal blocked (using default piece positions)
				//fromX, fromY, toX, toY
				QUnit.test("testDiagonalBlocked", function( assert ) {
					//test unblocked moving forward
					//moving left
					assert.equal(diagonalBlocked(6,1,3,4), false);
					assert.equal(diagonalBlocked(7,3,4,6), false);
					//moving right
					assert.equal(diagonalBlocked(0,1,4,5), false);
					assert.equal(diagonalBlocked(2,3,5,6), false);
					//test unblocked moving backwards
					//moving left
					assert.equal(diagonalBlocked(6,6,2,2), false);
					assert.equal(diagonalBlocked(5,4,2,1), false);
					//moving right
					assert.equal(diagonalBlocked(1,6,5,2), false);
					assert.equal(diagonalBlocked(2,4,5,1), false);
					//test blocked moving forward
					//moving left
					assert.equal(diagonalBlocked(7,0,3,4), true);
					assert.equal(diagonalBlocked(7,1,1,7), true);
					//moving right
					assert.equal(diagonalBlocked(0,0,4,4), true);
					assert.equal(diagonalBlocked(1,3,5,7), true);
					//test blocked moving backwards
					//moving left
					assert.equal(diagonalBlocked(6,7,2,3), true);
					assert.equal(diagonalBlocked(7,4,3,0), true);
					//moving right
					assert.equal(diagonalBlocked(0,7,4,3), true);
					assert.equal(diagonalBlocked(1,4,5,0), true);
				});
				//test square unoccupied
				QUnit.test("testVacantSquare", function( assert ) {
					assert.equal(vacant(2,5), true);
					assert.equal(vacant(3,2), true);
					assert.equal(vacant(4,4), true);
					assert.equal(vacant(5,1), true);
					assert.equal(vacant(0,4), false);
					assert.equal(vacant(1,3), false);
					assert.equal(vacant(6,7), false);
					assert.equal(vacant(7,0), false);
				});
				//test square occupied by own piece
				QUnit.test("testoccupiedByOwnPiece", function( assert ) {
					assert.equal(occupiedByOwnPiece(0,1,'w'), true);
					assert.equal(occupiedByOwnPiece(0,1,'b'), false);
					assert.equal(occupiedByOwnPiece(1,4,'w'), true);
					assert.equal(occupiedByOwnPiece(1,4,'b'), false);
					assert.equal(occupiedByOwnPiece(7,1,'w'), false);
					assert.equal(occupiedByOwnPiece(7,1,'b'), true);
					assert.equal(occupiedByOwnPiece(6,7,'w'), false);
					assert.equal(occupiedByOwnPiece(6,7,'b'), true);
					assert.equal(occupiedByOwnPiece(0,-1,'w'), false);
					assert.equal(occupiedByOwnPiece(0,8,'w'), false);
				});
				//test square occupied by other piece
				QUnit.test("testoccupiedByOtherPiece", function( assert ) {
					assert.equal(occupiedByOtherPiece(0,1,'w'), false);
					assert.equal(occupiedByOtherPiece(0,1,'b'), true);
					assert.equal(occupiedByOtherPiece(1,4,'w'), false);
					assert.equal(occupiedByOtherPiece(1,4,'b'), true);
					assert.equal(occupiedByOtherPiece(7,1,'w'), true);
					assert.equal(occupiedByOtherPiece(7,1,'b'), false);
					assert.equal(occupiedByOtherPiece(6,7,'w'), true);
					assert.equal(occupiedByOtherPiece(6,7,'b'), false);
					assert.equal(occupiedByOtherPiece(0,-1,'w'), false);
					assert.equal(occupiedByOtherPiece(0,8,'w'), false);
				});
				//test piece movement (dummyish game)
				QUnit.test("testMoveValidation", function( assert ) {
					//TEST PAWN
					//invalid pawn movement - diagonal
					assert.equal(validatePawn('w', [1,4], [2,3]), false);
					//invalid pawn movement - 3 spaces
					assert.equal(validatePawn('w', [1,2], [4,2]), false);
					//valid pawn movement - 2 spaces on first go
					assert.equal(validatePawn('w', [1,4], [3,4]), true);					
					updateAbstractBoard([1,4],[3,4]);
					//valid pawn movement - 1 space
					assert.equal(validatePawn('b', [6,4], [5,4]), true);					
					updateAbstractBoard([6,4], [5,4]);
					assert.equal(validatePawn('w', [1,5], [2,5]), true);					
					updateAbstractBoard([1,5],[2,5]);
					assert.equal(validatePawn('b', [6,3], [4,3]), true);					
					updateAbstractBoard([6,3], [4,3]);
					//take piece
					assert.equal(validatePawn('w', [3,4], [4,3]), true);					
					updateAbstractBoard([3,4], [4,3]);
					//invalid pawn movement - 2 spaces, not first go
					assert.equal(validatePawn('b', [5,4], [3,4]), false);
					//valid pawn movement - vulnerable to En passant
					assert.equal(validatePawn('b', [6,2], [4,2]), true);
					assert.equal(enPassantAvailable[0], 4);
					assert.equal(enPassantAvailable[1], 2);	
					updateAbstractBoard([6,2],[4,2]);
					//ignore En passant - timed out
					assert.equal(validatePawn('w', [4,3], [5,4]), true);
					assert.equal(checkEnPassantPerformed(), false);
					assert.equal(enPassantAvailable, false);
					updateAbstractBoard([4,3], [5,4]);
					assert.equal(validatePawn('b', [4,2], [3,2]), true);
					updateAbstractBoard([4,2], [3,2]);
					//make white vulnerable to En passant
					assert.equal(validatePawn('w', [1,1], [3,1]), true);
					assert.equal(enPassantAvailable[0], 3);
					assert.equal(enPassantAvailable[1], 1);		
					updateAbstractBoard([1,1],[3,1]);
					//perform En passant
					assert.equal(validatePawn('b', [3,2], [2,1]), true);
					assert.equal(enPassantAvailable, false);
					assert.equal(checkEnPassantPerformed(), true);
					assert.equal(abstractBoard[3][1], false);
					//valid moves
					assert.equal(validatePawn('w', [1,0], [2,1]), true);
					updateAbstractBoard([1,0],[2,1]);
					assert.equal(validatePawn('b', [6,1], [5,1]), true);
					updateAbstractBoard([6,1],[5,1]);
					//invalid move - take own piece
					assert.equal(validatePawn('w', [1,2], [2,1]), false);
					//TEST KNIGHT
					//invalid move - take own piece
					assert.equal(validateKnight('w', [0,1], [1,3]), false);
					//invalid move - along y-axis 1 space
					assert.equal(validateKnight('w', [0,1], [1,1]), false);
					//invalid move - along y-axis 3 spaces
					assert.equal(validateKnight('w', [0,1], [3,1]), false);
					//invalid move - 3 on x, 1 on y
					assert.equal(validateKnight('w', [0,1], [1,4]), false);
					//invalid move - 3 on y, 1 on x
					assert.equal(validateKnight('w', [0,1], [3,2]), false);
					//valid moves
					assert.equal(validateKnight([0,1], [2,2]), true);
					updateAbstractBoard([0,1],[2,2]);
					assert.equal(validateKnight([7,6], [5,5]), true);
					updateAbstractBoard([7,6],[5,5]);
					assert.equal(validateKnight([2,2], [3,4]), true);
					updateAbstractBoard([2,2],[3,4]);
					assert.equal(validateKnight([5,5], [4,3]), true);
					//TEST BISHOP
					//invalid x-axis
					assert.equal(validateBishop([0,2], [0,0]), false);
					//invalid y-axis
					assert.equal(validateBishop([7,2], [4,2]), false);
					//blocked diagonal
					assert.equal(validateBishop([0,2], [3,5]), false);
					assert.equal(validateBishop([7,2], [4,5]), false);
					//valid moves
					assert.equal(validateBishop([0,2], [2,0]), true);
					updateAbstractBoard([0,2],[2,0]);
					assert.equal(validateBishop([7,5], [2,0]), true);
					updateAbstractBoard([7,5],[2,0]);
					//TEST ROOK
					//valid take on y-axis
					assert.equal(validateRook([0,0], [2,0]), true);
					updateAbstractBoard([0,0],[2,0]);
					//blocked y-axis
					assert.equal(validateRook([7,7], [4,7]), false);
					//blocked x-axis
					assert.equal(validateRook([2,0], [2,3]), false);
					//invalid diagonal
					assert.equal(validateRook([2,0], [6,4]), false);
					//move pawn out of way
					updateAbstractBoard([2,1],[3,1]);
					//valid rook on x-axis
					assert.equal(validateRook([2,0], [2,3]), true);
					updateAbstractBoard([2,0], [2,3]);
					//TEST QUEEN - not really required: same as bishop/rook
					//valid take on y
					assert.equal(validateQueen([7,3], [2,3]), true);
					updateAbstractBoard([7,3], [2,3]);
					//valid move on x
					assert.equal(validateQueen([0,3], [0,0]), true);
					updateAbstractBoard([0,3], [0,0]);
					//valid diagonals
					//fwd+left
					assert.equal(validateQueen([2,3], [4,1]), true);
					updateAbstractBoard([2,3], [4,1]);
					//fwd+right
					assert.equal(validateQueen([0,0], [3,3]), true);
					updateAbstractBoard([0,0], [3,3]);
					//bkwd+right
					assert.equal(validateQueen([4,1], [2,3]), true);
					updateAbstractBoard([4,1], [2,3]);
					//bkwd+left
					assert.equal(validateQueen([3,3], [1,1]), true);
					updateAbstractBoard([3,3], [1,1]);
					//blocked x
					assert.equal(validateQueen([2,3], [2,6]), false);
					//blocked y
					assert.equal(validateQueen([2,3], [0,3]), false);
					//blocked diagonal
					assert.equal(validateQueen([2,3], [0,1]), false);
					//shift pieces around
					updateAbstractBoard([7,2], [5,0]);
					updateAbstractBoard([7,1], [5,2]);
					updateAbstractBoard([1,6], [3,6]);
					updateAbstractBoard([0,6], [2,7]);
					updateAbstractBoard([0,5], [1,6]);
					//TEST KING
					//invalid long castle - passes through check on y
					updateAbstractBoard([1,1], [3,3]);
					assert.equal(validateKing('b', [7,4], [7,2]), false);
					//shift pieces
					updateAbstractBoard([3,3], [4,4]);
					updateAbstractBoard([2,3], [3,3]);
					//invalid long castle - passes through check on diagonal
					assert.equal(validateKing('b', [7,4], [7,2]), false);
					//invalid long castle - in check on y
					updateAbstractBoard([4,4], [5,4]);
					assert.equal(validateKing('b', [7,4], [7,2]), false);
					//invalid short castle - passes through check on diagonal
					assert.equal(validateKing('w', [0,4], [0,6]), false);
					//invalid short castle - in check on x
					updateAbstractBoard([3,3], [0,0]);
					assert.equal(validateKing('w', [0,4], [0,6]), false);
					//remove check
					updateAbstractBoard([0,0], [1,0]);
					updateAbstractBoard([3,1], [4,1]);
					//valid short castle - don't actually move
					assert.equal(validateKing('w', [0,4], [0,6]), true);
					//mark king as moved
					unmoved[0][4] = false;
					//invalid short castle - already moved
					assert.equal(validateKing('w', [0,4], [0,6]), false);
					//remove check
					updateAbstractBoard([1,0], [5,4]);
					//valid long castle
					assert.equal(validateKing('b', [7,4], [7,2]), true);
					//King movement
					//invalid two spaces on x
					assert.equal(validateKing('w', [0,4], [0,2]), false);
					//invalid two spaces on y
					assert.equal(validateKing('w', [0,4], [2,4]), false);
					//invalid two spaces on diagonal
					assert.equal(validateKing('w', [0,4], [2,6]), false);
					//valid x
					assert.equal(validateKing('w', [0,4], [0,5]), true);
					updateAbstractBoard([0,4], [0,5]);
					//valid y
					assert.equal(validateKing('w', [0,5], [1,5]), true);
					updateAbstractBoard([0,5], [1,5]);
					//valid diagonal
					assert.equal(validateKing('w', [1,5], [2,6]), true);
					updateAbstractBoard([1,5], [2,6]);
					//test not in check
					assert.equal(inCheck('w'), false);
					assert.equal(abstractBoard[5][5], 'b_knight');
					//test in check by knight
					updateAbstractBoard([5,5], [4,7]);
					assert.equal(inCheck('w'), true);
					//move out of check
					updateAbstractBoard([2,6], [3,7]);
					//test in check on diagonal
					updateAbstractBoard([5,4], [5,5]);
					assert.equal(inCheck('w'), true);
					//block check on diagonal
					updateAbstractBoard([3,6], [4,6]);
					assert.equal(inCheck('w'), false);
					//check blocked on x-axis
					updateAbstractBoard([5,5], [3,3]);
					assert.equal(inCheck('w'), false);
					//check on x
					//check on y already tested
					updateAbstractBoard([3,4], [5,5]);
					assert.equal(inCheck('w'), true);
					updateAbstractBoard([5,5],[3,4]);
					//shift pieces
					updateAbstractBoard([6,5],[5,5]);
					updateAbstractBoard([4,6],[5,5]);
					//check by pawn
					updateAbstractBoard([6,6], [4,6]);
					assert.equal(inCheck('w'), true);					
					//CHECKMATE exclusively tested server-side
				});				
			</script>
		</head>
		<body>
		<div id="qunit"></div>
	</body>
</html>