<!doctype html>
	<html>
		<head>
			<meta charset="utf-8">
			<title>JS Unit Tests</title>
			{# TODO: composer packages #}
			<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js"></script>
			<link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.17.1.css">
			<script src="//code.jquery.com/qunit/qunit-1.17.1.js"></script>
			<script src="{{ asset('bundles/cminterface/js/boardHelper.js') }}"></script>
			<script>
				//test abstractBoard indices to grid reference conversion
				QUnit.test("testResolveAbstractBoardReference", function( assert ) {
					for (i = 1; i <= 8; i++) {
						for (j = 0; j < 8; j++) {
							var alphaX = letterAt[j];
							var indices = getAbstractIndicesFromGridRef(alphaX, i);
							assert.equal(indices[0], i-1);
							assert.equal(indices[1], j);
							assert.equal(getGridRefFromAbstractIndices(indices[0], indices[1]), alphaX+'_'+i);
						}
					}
				});
				//test moving pieces on abstract board (using default piece positions)
				QUnit.test("testUpdateAbstractBoard", function( assert ) {
					updateAbstractBoard([1,4],[3,2]);
					assert.equal(abstractBoard[1][4], false);
					assert.equal(abstractBoard[3][2], 'wPawn');
					updateAbstractBoard([7,3],[4,3]);
					assert.equal(abstractBoard[7][3], false);
					assert.equal(abstractBoard[4][3], 'bQueen');
					//reset board
					updateAbstractBoard([3,2],[1,4]);
					updateAbstractBoard([4,3],[7,3]);						
				});
				//test checking if x-axis is blocked (using default piece positions)
				QUnit.test("testXAxisBlocked", function( assert ) {
					//test unblocked moving left
					assert.equal(xAxisBlocked(3,0,2), false);
					assert.equal(xAxisBlocked(7,2,3), false);
					//test unblocked moving right
					assert.equal(xAxisBlocked(1,6,2), false);
					assert.equal(xAxisBlocked(3,7,3), false);
					//test blocked moving left
					assert.equal(xAxisBlocked(3,0,0), true);
					assert.equal(xAxisBlocked(5,1,1), true);
					assert.equal(xAxisBlocked(7,2,6), true);
					assert.equal(xAxisBlocked(3,0,7), true);
					//test blocked moving right
					assert.equal(xAxisBlocked(1,6,0), true);
					assert.equal(xAxisBlocked(3,7,1), true);
					assert.equal(xAxisBlocked(1,7,6), true);
					assert.equal(xAxisBlocked(3,5,7), true);
				});
				//test checking if y-axis is blocked (using default piece positions)
				QUnit.test("testYAxisBlocked", function( assert ) {
					//test unblocked moving forward
					assert.equal(yAxisBlocked(1,5,2), false);
					assert.equal(yAxisBlocked(2,4,3), false);
					//test unblocked moving backwards
					assert.equal(yAxisBlocked(6,2,2), false);
					assert.equal(yAxisBlocked(5,1,5), false);
					//test blocked moving forward
					assert.equal(yAxisBlocked(0,4,0), true);
					assert.equal(yAxisBlocked(0,2,1), true);
					//test blocked moving backwards
					assert.equal(yAxisBlocked(7,2,3), true);
					assert.equal(yAxisBlocked(7,3,4), true);
				});
				//test checking if two squares are diagonal (using default piece positions)
				QUnit.test("testOnDiagonal", function( assert ) {
					//test on diagonal
						//moving forwards
							//moving left
							assert.equal(onDiagonal([1,7],[5,3]), true);
							//moving right
							assert.equal(onDiagonal([0,3],[3,6]), true);
						//moving backwards
							//moving left
							assert.equal(onDiagonal([7,5],[5,3]), true);
							//moving right
							assert.equal(onDiagonal([6,7],[3,4]), true);
					//test not on diagonal
						//moving forwards
							//moving left
							assert.equal(onDiagonal([1,5],[3,4]), false);
							//moving right
							assert.equal(onDiagonal([2,3],[3,6]), false);
						//moving backwards
							//moving left
							assert.equal(onDiagonal([5,7],[4,4]), false);
							//moving right
							assert.equal(onDiagonal([6,3],[3,7]), false);
				});
				//test checking if diagonal is blocked (using default piece positions)
				//fromX, fromY, toX, toY
				QUnit.test("testDiagonalBlocked", function( assert ) {
					//test unblocked moving forward
					//moving left
					assert.equal(diagonalBlocked(6,1,3,4), false);
					assert.equal(diagonalBlocked(7,3,4,6), false);
					//moving right
					assert.equal(diagonalBlocked(0,1,4,5), false);
					assert.equal(diagonalBlocked(2,3,5,6), false);
					//test unblocked moving backwards
					//moving left
					assert.equal(diagonalBlocked(6,6,2,2), false);
					assert.equal(diagonalBlocked(5,4,2,1), false);
					//moving right
					assert.equal(diagonalBlocked(1,6,5,2), false);
					assert.equal(diagonalBlocked(2,4,5,1), false);
					//test blocked moving forward
					//moving left
					assert.equal(diagonalBlocked(7,0,3,4), true);
					assert.equal(diagonalBlocked(7,1,1,7), true);
					//moving right
					assert.equal(diagonalBlocked(0,0,4,4), true);
					assert.equal(diagonalBlocked(1,3,5,7), true);
					//test blocked moving backwards
					//moving left
					assert.equal(diagonalBlocked(6,7,2,3), true);
					assert.equal(diagonalBlocked(7,4,3,0), true);
					//moving right
					assert.equal(diagonalBlocked(0,7,4,3), true);
					assert.equal(diagonalBlocked(1,4,5,0), true);
				});
				//test checking if square is unoccupied
				QUnit.test("testVacantSquare", function( assert ) {
					assert.equal(vacant(2,5), true);
					assert.equal(vacant(3,2), true);
					assert.equal(vacant(4,4), true);
					assert.equal(vacant(5,1), true);
					assert.equal(vacant(0,4), false);
					assert.equal(vacant(1,3), false);
					assert.equal(vacant(6,7), false);
					assert.equal(vacant(7,0), false);
				});
				//test checking if square is occupied by own piece
				QUnit.test("testoccupiedByOwnPiece", function( assert ) {
					assert.equal(occupiedByOwnPiece(0,1,'w'), true);
					assert.equal(occupiedByOwnPiece(0,1,'b'), false);
					assert.equal(occupiedByOwnPiece(1,4,'w'), true);
					assert.equal(occupiedByOwnPiece(1,4,'b'), false);
					assert.equal(occupiedByOwnPiece(7,1,'w'), false);
					assert.equal(occupiedByOwnPiece(7,1,'b'), true);
					assert.equal(occupiedByOwnPiece(6,7,'w'), false);
					assert.equal(occupiedByOwnPiece(6,7,'b'), true);
					assert.equal(occupiedByOwnPiece(0,-1,'w'), false);
					assert.equal(occupiedByOwnPiece(0,8,'w'), false);
				});
				//test checking if square is occupied by other piece
				QUnit.test("testoccupiedByOtherPiece", function( assert ) {
					assert.equal(occupiedByOtherPiece(0,1,'w'), false);
					assert.equal(occupiedByOtherPiece(0,1,'b'), true);
					assert.equal(occupiedByOtherPiece(1,4,'w'), false);
					assert.equal(occupiedByOtherPiece(1,4,'b'), true);
					assert.equal(occupiedByOtherPiece(7,1,'w'), true);
					assert.equal(occupiedByOtherPiece(7,1,'b'), false);
					assert.equal(occupiedByOtherPiece(6,7,'w'), true);
					assert.equal(occupiedByOtherPiece(6,7,'b'), false);
					assert.equal(occupiedByOtherPiece(0,-1,'w'), false);
					assert.equal(occupiedByOtherPiece(0,8,'w'), false);
				});
			</script>
		</head>
		<body>
		<div id="qunit"></div>
	</body>
</html>